/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as appRegisterIndexRouteImport } from './routes/(app)/register/index'
import { Route as appPatientsIndexRouteImport } from './routes/(app)/patients/index'
import { Route as appLoginIndexRouteImport } from './routes/(app)/login/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appRegisterIndexRoute = appRegisterIndexRouteImport.update({
  id: '/(app)/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const appPatientsIndexRoute = appPatientsIndexRouteImport.update({
  id: '/(app)/patients/',
  path: '/patients/',
  getParentRoute: () => rootRouteImport,
} as any)
const appLoginIndexRoute = appLoginIndexRouteImport.update({
  id: '/(app)/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof appLoginIndexRoute
  '/patients': typeof appPatientsIndexRoute
  '/register': typeof appRegisterIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof appLoginIndexRoute
  '/patients': typeof appPatientsIndexRoute
  '/register': typeof appRegisterIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)/login/': typeof appLoginIndexRoute
  '/(app)/patients/': typeof appPatientsIndexRoute
  '/(app)/register/': typeof appRegisterIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/patients' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/patients' | '/register'
  id:
    | '__root__'
    | '/'
    | '/(app)/login/'
    | '/(app)/patients/'
    | '/(app)/register/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appLoginIndexRoute: typeof appLoginIndexRoute
  appPatientsIndexRoute: typeof appPatientsIndexRoute
  appRegisterIndexRoute: typeof appRegisterIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/register/': {
      id: '/(app)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof appRegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/patients/': {
      id: '/(app)/patients/'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof appPatientsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/login/': {
      id: '/(app)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof appLoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appLoginIndexRoute: appLoginIndexRoute,
  appPatientsIndexRoute: appPatientsIndexRoute,
  appRegisterIndexRoute: appRegisterIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
